The Registry

通常来说，C 函数需要保留一些非局部的数据，也就是指那些超过他们作用范围的数据。C 语言中我们使用全局变量或者 static 变量来满足这种需要。
然而当你为 Lua 设计一个程序库的时候，全局变量和 static 变量不是一个好的方法
  registry  一直位于一个由  LUA_REGISTRYINDEX  定义的值所对应的假索引(pseudo-index)的位置。一个假索引除了他对应的值不在栈中之外，
其他都类似于栈中的索引。Lua API 中大部分接受索引作为参数的函数，也都可以接受假索引作为参数—除了那些操作栈本身的函数，比如 lua_remove，lua_insert
lua_pushlightuserdata(L, (void *)&Key); 
/* push address */ 
lua_pushnumber(L, myNumber); 
/* push value */
/* registry[&Key] = myNumber */ 
lua_settable(L, LUA_REGISTRYINDEX);

/* retrieve a number */
lua_pushlightuserdata(L, (void *)&Key); 
/* push address */ 
lua_gettable(L, LUA_REGISTRYINDEX); 
/* retrieve value */ 
myNumber = lua_tonumber(L, -1); /* 


References

Reference 系统是由辅助库中的一对函数组成，这对函数用来不需要担心名称冲突的将值保存到 registry 中去。
int r = luaL_ref(L, LUA_REGISTRYINDEX);
从栈中弹出一个值，以一个新的数字作为 key 将其保存到 registry 中，并返回这个key。我们将这个 key 称之为 reference。
要想将一个 reference 的对应的值入栈，只需要：
lua_rawgeti(L, LUA_REGISTRYINDEX, r);
最后，我们调用下面的函数释放值和 reference：
luaL_unref(L, LUA_REGISTRYINDEX, r);
