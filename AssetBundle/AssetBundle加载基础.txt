AssetBundle加载基础
通过AssetBundle加载资源，分为两步，第一步是获取AssetBundle对象，第二步是通过该对象加载需要的资源
1获取AssetBundle对象的常用API:
	1先获取WWW对象，再通过WWW.assetBundle获取AssetBundle对象：
		public WWW(string url)
			加载Bundle文件并获取WWW对象，完成后会在内存中创建较大的WebStream（解压后的内容，通常为原Bundle文件的4~5倍大小，纹理资源比例可能更大），因此后续的AssetBundle.Load可以直接在内存中进行。
		public static WWW LoadFromCacheOrDownload(string url, int version, uint crc = 0);
			加载Bundle文件并获取WWW对象，同时将解压形式的Bundle内容存入磁盘中作为缓存（如果该Bundle已在缓存中，则省去这一步），完成后只会在内存中创建较小的SerializedFile，而后续的AssetBundle.Load需要通过IO从磁盘中的缓存获取。
	2直接获取AssetBundle：
	 	public static AssetBundle LoadFromFile(string path);
			通过未压缩的Bundle文件，同步创建AssetBundle对象，这是最快的创建方式。创建完成后只会在内存中创建较小的SerializedFile，而后续的AssetBundle.Load需要通过IO从磁盘中获取
		public static AssetBundleCreateRequest LoadFromMemory(byte[] binary);
			通过Bundle的二进制数据，异步创建AssetBundle对象。完成后会在内存中创建较大的WebStream。
		public static AssetBundle CreateFromMemoryImmediate(byte[] binary);
			该接口是CreateFromMemory的同步版本。
2从AssetBundle加载资源的常用API
	public Object Load(string name, Type type);
	public Object[] LoadAll(Type type);
	public AssetBundleRequest LoadAsync(string name, Type type);

一、接口对比：new WWW与WWW.LoadFromCacheOrDownload
	（1）前者的优势
		后续的Load操作在内存中进行，相比后者的IO操作开销更小；
		不形成缓存文件，而后者则需要额外的磁盘空间存放缓存；
		能通过WWW.texture，WWW.bytes，WWW.audioClip等接口直接加载外部资源，而后者只能用于加载AssetBundle
	（2）前者的劣势
		每次加载都涉及到解压操作，而后者在第二次加载时就省去了解压的开销；
		在内存中会有较大的WebStream，而后者在内存中只有通常较小的SerializedFile。（此项为一般情况，但并不绝对，对于序列化信息较多的Prefab，很可能出现SerializedFile比WebStream更大的情况）
三、注意点
	1.CreateFromFile只能适用于未压缩的AssetBundle，而Android系统下StreamingAssets是在压缩目录(.jar)                                                            中，因此需要先将未压缩的AssetBundle放到SD卡中才能对其使用CreateFromFile。
	2.对于存在依赖关系的Bundle包，在加载时主要注意顺序。举例来说，假设CanvasA在BundleA中，所依赖的AtlasB在BundleB中，为了确保资源正确引用，那么最晚创建BundleB的Asset  Bundle对象的时间点是在实例化CanvasA之前。即，创建BundleA的AssetBundle对象时、Load(“CanvasA”)时，BundleB的AssetBundle对象都可以不在内存中。
	3.CreateFromFile和WWW.LoadFromCacheOrDownload的调用会增加RersistentManager.Remapper的大小，而PersistentManager负责维护资源的持久化存储，Remapper保存的是加   载到内存的资源HeapID与源数据FileID的映射关系，它是一个Memory Pool，其行为类似Mono堆内存，只增不减，因此需要对这两个接口的使用做合理的规划。
	4.根据经验，建议AssetBundle文件的大小不超过1MB，因为在普遍情况下Bundle的加载时间与其大小并非呈线性关系，过大的Bundle可能引起较大的加载开销。
	5.由于WWW对象的加载是异步的，因此逐个加载容易出现下图中CPU空闲的情况（选中帧处Vsync占了大部分），此时建议适当地同时加载多个对象，以增加CPU的使用率，同时加快加载的   完成。
	6.在通过AssetBundle.Unload(false)卸载AssetBundle对象后，如果重新创建该对象并加载之前加载过的资源到内存时，会出现冗余，即两份相同的资源。
	  被脚本的静态变量引用的资源，在调用Resources.UnloadUnusedAssets时，并不会被卸载，在Profiler中能够看到其引用情况。
资源卸载
	场景物件（GameObject）：这类物件可通过Destroy函数进行卸载；
	资源（包括Prefab）：除了Prefab以外，资源文件可以通过三种方式来卸载：
		1) 通过Resources.UnloadAsset卸载指定的资源，CPU开销小；
		2) 通过Resources.UnloadUnusedAssets一次性卸载所有未被引用的资源，CPU开销大；
		3) 通过AssetBundle.Unload(true)在卸载AssetBundle对象时，将加载出来的资源一起卸载。
	而对于Prefab，目前仅能通过DestroyImmediate来卸载，且卸载后，必须重新加载AssetBundle才能重新加载该Prefab。由于内存开销较小，通常不建议进行针对性地卸载。
	WWW对象：调用对象的Dispose函数或将其置为null即可；
	WebStream：在卸载WWW对象以及对应的AssetBundle对象后，这部分内存即会被引擎自动卸载；
	SerializedFile：卸载AssetBundle后，这部分内存会被引擎自动卸载；
	AssetBundle对象：AssetBundle的卸载有两种方式：
	1)通过AssetBundle.Unload(false)，卸载AssetBundle对象时保留内存中已加载的资源；
	2)通过AssetBundle.Unload(true)，卸载AssetBundle对象时卸载内存中已加载的资源，由于该方法容易引起资源引用丢失，因此并不建议经常使用；

UWA推荐方案
	1.	对于需要常驻内存的Bundle文件来说，优先考虑减小内存占用，因此对于存放非Prefab资源（特别是纹理）的Bundle文件，可以考虑使用WWW.LoadFromCacheOrDownload或AssetB	undle.CreateFromFile加载，从而避免WebStream常驻内存；而对于存放较多Prefab资源的Bundle，则考虑使用new 														WWW加载，因为这类Bundle用WWW.LoadFromCacheOrDownload加载时产生的SerializedFile可能会比new WWW产生的WebStream更大。
	2.	对于加载完后即卸载的Bundle文件，则分两种情况：优先考虑速度（加载场景时）和优先考虑流畅度（游戏进行时）。
		1）加载场景的情况下，需要注意的是避免WWW对象的逐个加载导致的CPU空闲，可以考虑使用加载速度较快的WWW.LoadFromCacheOrDownload或AssetBundle.CreateFromFile，但需要避免后续大量地进行Load资源的操作，引起IO开销（可以尝试直接LoadAll）。
		2） 游戏进行的情况下，则需要避免使用同步操作引起卡顿，因此可以考虑使用new WWW配合AssetBundle.LoadAsync来进行平滑的资源加载，但需要注意的是，对于Shader、较大的Texture等资源，其初始化操作通常很耗时，容易引起卡顿，因此建议将这类资源在加载场景时进行预加载。
	3.	只在Bundle需要加密的情况下，考虑使用CreateFromMemory，因为该接口加载速度较慢。
	4.	尽量避免在游戏进行中调用Resources.UnloadUnusedAssets()，因为该接口开销较大，容易引起卡顿，可尝试使用Resources.Unload(obj)									来逐个进行卸载，以保证游戏的流畅度。