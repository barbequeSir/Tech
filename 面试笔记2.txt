数组
	内存中是连续的存储的，所以索引速度很快，插入和删除元素效率比较低，声明数组的时候，必须同时指明数组的长度
ArrayList
	可以很方便的进行数据的添加，插入和移除，会把所有插入其中的数据都当作为object类型来处理，存在了装箱与拆箱的操作
List 泛型等效类

Interface 和抽象类  
	实现interface必须要实现Interface中所有方法

foreach 是只读的  不能边遍历边修改
Sealed 可以防止其它类继承此类，在方法中声明可以防止派生类重写此方法
Mono是.net的一个开源跨平台工具
四元数相对于欧拉角 1增量旋转 2 避免万向锁 

AddForce(x,y,z,ForceMode)
	ForceMode	fm:
		Force 			ma = fm 	Add a continuous force to the rigidbody, using its mass.
		Acceleration  	a = fm  	Add a continuous acceleration to the rigidbody, ignoring its mass.
		Impulse			mv = fm 	Add an instant force impulse to the rigidbody, using its mass.
		VelocityChange	v = fm 		Add an instant velocity change to the rigidbody, ignoring its mass.

当使用Renderer.material的时候，每次调用都会生成一个新的material到内存中去，这在销毁物体的时候需要我们手动去销毁该material，否则会一直存在内存中。
也可以在场景替换的时候使用Resources.UnloadUnusedAssets去统一释放内存。

当使用Renderer.sharedMaterial的时候并不会生成新的material，而是直接在原material上修改，并且修改后的设置就会被保存到项目工程中。一般不推荐使用这个去修改，当某个材质球只被一个gameobject使用的时候可以使用这个去修改，并且最好在修改之前把原属性设置保存，当使用完毕后立即恢复原设置，防止下次加载后的gameobject上还会残留之前的设置信息。

如果是主角这一类gameobject身上需要修改材质的属性或者shader属性比较多的时候，可以第一次使用material，这样可以动态的生成一个material实例，然后再使用sharedmaterial，动态的修改这个新生成的material，而且不会创建新的material。

public int KMP(String t,String p)
{
	char[] target = t.toCharArray();
	char[] pattern = p.toCharArray();
	int i = 0;
	int j = 0;
	int[] next = getNext(pattern);
	while(i < target.length&& j < pattern.length)
	{
		if(j==-1 || target[i] == pattern[j])
		{
			i++;
			j++;			
		}
		else
		{
			j=next[j];
		}
	}

	if(j == pattern.length)
		reutrn i-j;
	else
		return -1;	
}

public int[] getNext(String pattern)
{
	char[] p = pattern.toCharArray();
	int[] next = new int[p.length];
	next[0] = -1;
	int i = 0;
	int j = -1;
	while(i<p.length-1)
	{
		if(j == -1 || p[i] == p[j])
		{
			i++;
			j++;
			next[i] = j;
		}
		else
		{
			j = next[j]
		}
	}
	return next;
}