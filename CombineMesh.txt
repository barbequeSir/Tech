CombineMesh
object[] objs = Selection.gameObjects;
if(objs.Length <= 0) return;
MeshFilter[] meshFilters = new MeshFilter[objs.Length];
MeshRender[] meshRenders = new MeshRender[objs.Length];
CombineInstance[] combines = new CombineInstance[objs.Length];
Material[] mats = new Material[objs.Length]
for(int i = 0;i<objs.Length; i++)
{
	meshFilter[i] = ((GameObject)objs[i]).GetComponent<MeshFilter>();
	meshRender[i] = ((GameObject)objs[i]).GetComponent<MeshRender>();
	mats[i].sharedMaterial = meshRender[i].sharedMaterial;
	combines[i].mesh = meshFilter[i].sharedMesh;
	combines[i].transform = meshFilter[i].transform.localToWorldMatrix;
}

GameObject go = new GameObject();
MeshFilter filter = go.transform.GetComponent<MeshFilter>();
if(filter == null)
{
	filter = go.transform.AddComponent<MeshFilter>();
}
filter.sharedMesh = new Mesh();
filter.sharedMesh.CombineMeshes(combines,false)


MeshRender render = go.GetComponent<MeshRender>();
if(render == null)
{
	render= go.AddComponent<MeshRender>();
}
render.sharedMaterials = mats;